---
# tasks file for iptables-firewall role
- name: Add Interfaces to networks list
  ansible.builtin.set_fact:
    fnetworks : '{{ fnetworks | default([]) + [ item[0] | combine ( { "interface" : item[1] } ) ] }}'
  with_nested: 
    - '{{ networks }}'
    - '{{ ansible_interfaces }}'
  when: 
    "item[0].ipv4 == hostvars[inventory_hostname]['ansible_' ~ item[1]]['ipv4']['network']"

- name: Print interfaces
  ansible.builtin.debug:
    msg: "{{ fnetworks }}"

- name: iptables rules for IPSEC VPN tunnel
  block:
    - name: Allow input on ports 500 and 4500
      ansible.builtin.iptables:
        chain: INPUT
        protocol: udp
        destination_port: "{{ item }}"
        ctstate: NEW
        jump: ACCEPT
      with_items: [ 500, 4500 ]

    - name: Allow output on ports 500 and 4500
      ansible.builtin.iptables:
        chain: OUTPUT
        protocol: udp
        destination_port: "{{ item }}"
        ctstate: NEW
        jump: ACCEPT
      with_items: [ 500, 4500 ]

    - name: Allow ESP encrypted data packets
      ansible.builtin.command:
        cmd: "iptables -A INPUT -p esp -j ACCEPT"

    - name: Forward ESP ipsec policy IN
      ansible.builtin.command:
        cmd: "iptables -A FORWARD --match policy --pol ipsec --dir in  --proto esp -j ACCEPT"

    - name: Forward ESP ipsec policy OUT
      ansible.builtin.command:
        cmd: "iptables -A FORWARD --match policy --pol ipsec --dir out --proto esp -j ACCEPT"

- name: Allow lan to use DNS on DMZ
  block:
    - name: Forward UDP DNS from lan to DMZ 
      ansible.builtin.iptables:
        chain: FORWARD
        protocol: udp
        in_interface: "{{ item[0].interface }}"
        out_interface: "{{ item[1].interface }}"
        destination_port: 53
        ctstate: NEW
        jump: ACCEPT
      with_nested:
        - '{{ fnetworks | community.general.json_query("[?name==`lan`]") }}'
        - '{{ fnetworks | community.general.json_query("[?name==`dmz`]")}}'

- name: Allow wan to use DNS on DMZ
  block:
    - name: Forward UDP DNS from lan to DMZ 
      ansible.builtin.iptables:
        chain: FORWARD
        protocol: udp
        in_interface: "{{ item[0].interface }}"
        out_interface: "{{ item[1].interface }}"
        destination_port: 53
        ctstate: NEW
        jump: ACCEPT
      with_nested:
        - '{{ fnetworks | community.general.json_query("[?name==`wan`]") }}'
        - '{{ fnetworks | community.general.json_query("[?name==`dmz`]")}}'

- name: Allow private networks to INTERNET
  block:
  - name: Allow forward ping request 
    ansible.builtin.iptables:
      chain: FORWARD
      protocol: icmp
      icmp_type: echo-request
      jump: ACCEPT
      in_interface: "{{ item[0].interface }}"
      out_interface: "{{ item[1].interface }}"
      comment: Accept outgoing forward ping from private networks
    with_nested:
      - '{{ fnetworks | community.general.json_query("[?type==`private`]") }}'
      - '{{ fnetworks | community.general.json_query("[?name==`wan`]")}}'

  - name: Forward new packets on UDP port 53 (DNS)
    ansible.builtin.iptables:
      chain: FORWARD
      protocol: udp
      destination_port: 53
      in_interface: "{{ item[0].interface }}"
      out_interface: "{{ item[1].interface }}"
      ctstate: NEW
      jump: ACCEPT
    with_nested:
      - '{{ fnetworks | community.general.json_query("[?type==`private`]") }}'
      - '{{ fnetworks | community.general.json_query("[?name==`wan`]")}}'

  - name: Forward new packets for HTTP (80)
    ansible.builtin.iptables:
      chain: FORWARD
      protocol: tcp
      destination_port: 80
      in_interface: "{{ item[0].interface }}"
      out_interface: "{{ item[1].interface }}"
      ctstate: NEW
      syn: match
      jump: ACCEPT
    with_nested:
      - '{{ fnetworks | community.general.json_query("[?type==`private`]") }}'
      - '{{ fnetworks | community.general.json_query("[?name==`wan`]")}}'

  - name: Forward new packets for HTTPS (443)
    ansible.builtin.iptables:
      chain: FORWARD
      protocol: tcp
      destination_port: 443
      in_interface: "{{ item[0].interface }}"
      out_interface: "{{ item[1].interface }}"
      ctstate: NEW
      syn: match
      jump: ACCEPT
    with_nested:
      - '{{ fnetworks | community.general.json_query("[?type==`private`]") }}'
      - '{{ fnetworks | community.general.json_query("[?name==`wan`]")}}'

  - name: Nat private and DMZ networks
    ansible.builtin.iptables:
      table: nat
      chain: POSTROUTING
      source: "{{ item[0].ipv4 }}/{{ item[0].prefix }}"
      out_interface: "{{ item[1].interface }}"
      jump: MASQUERADE
    with_nested:
      - '{{ fnetworks | community.general.json_query("[?type==`private`]") }}'
      - '{{ fnetworks | community.general.json_query("[?name==`wan`]")}}'

# Save rules
- name: Save iptables in /etc/sysconfig/iptables
  ansible.builtin.command:
    cmd: service iptables save
  become: yes

- name: Save configuration in root dir
  ansible.builtin.shell:
    cmd: iptables-save > /root/ipt.save

- name: Restart iptables service
  ansible.builtin.service:
    name: iptables
    state: restarted

- name: Enable iptables service
  ansible.builtin.service:
    name: iptables
    enabled: true